====================【编辑文本操作】===================
alt+左键  选择自定义列
crl+R    选择相同字符串
alt+enter 补全&提示
====================【npm操作】===================
npm  updated -d 查看当前的版本信息
npm view npm versions 查看模块的所有版本

====================【命令行操作】===================
cls                 清空cmd记录
cd Desktop    到桌面


====================【Git操作】===================
git config --global user.name 'G2C5'
git config --global user.email 'g2c5@qq.com'

、、、、、、====【常用拉取仓库地址】====、、、、、、、

git clone 'https://github.com/G2C5/vscode-learn.git'


工作流：你的本地仓库由 git 维护的三棵“树”组成。
第一个是你的 工作目录，它持有实际文件；
第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；
最后是 HEAD，它指向你最后一次提交的结果。

、、、、、、====【基本操作】====、、、、、、、

// 初始化仓库
git init
// 克隆仓库（检出仓库）
git clone /path/to/repository  （本地仓库）
git clone username@host:/path/to/repository  （远程仓库）
// 添加修改的文件到暂缓区
git add <fliename>
git add *
// 提交 （至HEAD区）
git commit -m "描述"
// 推送更改（到远程仓库master分支）
git push origin master
git remote add origin <server>  （没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器）

、、、、、、====【分支】====、、、、、、、

什么是分支？分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。
// 创建一个“feature_x”分支并切换进去
git checkout -b feature_x
// 切换回主分支 
git checkout master
// 删除“feature_x”分支
git branch -d feature_x
// 分支推送到远端仓库，不然该分支就是 不为他人所见的
git push origin <branch>

// 一种是远程先开好分支然后拉到本地
git checkout -b 本地分支名 origin/远程分支名XX    //检出远程的XX分支到本地
// 另一种是创建并切换到分支feature-branch  
$  git checkout -b feature-branch    
// 并推送本地的feature-branch(冒号前面的)分支到远程origin的feature-branch(冒号后面的)分支(没有会自动创建)
$  git push origin feature-branch:feature-branch    


、、、、、、====【更新与合并】====、、、、、、、

// 在合并改动之前，你可以使用如下命令预览差异
git diff <source_branch> <target_branch>
// 更新本地仓库至最新改动，以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动
git pull
// 合并其他分支到你的当前分支
git merge <branch>
// 以上两种方法git都会尝试去自动合并改动，但可能需要手动修改文件，解决冲突（conflicts）
// 改完之后，将它们标记为合并成功
git add <filename>

、、、、、、====【标签】====、、、、、、、

// 创建一个叫做 1.0.0 的标签，1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符
// 可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。
git tag 1.0.0 1b2e1d63ff
// 获取提交 ID
git log

、、、、、、====【替换本地改动】====、、、、、、、

// 会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。
// 已添加到暂存区的改动以及新文件都不会受到影响。
git checkout -- <filename>
// 假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它
git fetch origin
git reset --hard origin/master